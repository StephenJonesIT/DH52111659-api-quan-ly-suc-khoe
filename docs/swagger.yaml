basePath: /api/v1
definitions:
  common.RequestAuth:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  common.RequestChangePassword:
    properties:
      new_password:
        maxLength: 100
        minLength: 8
        type: string
      old_password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - new_password
    - old_password
    type: object
  common.RequestForgotPassword:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  common.RequestOTP:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  common.RequestRefreshToken:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  common.ResponseAccessToken:
    properties:
      access_token:
        type: string
    type: object
  common.ResponseError:
    properties:
      error:
        type: string
    type: object
  common.ResponseLogin:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  common.ResponseNormal:
    properties:
      data: {}
      email:
        type: string
      message:
        type: string
      paging: {}
      result:
        type: boolean
    type: object
  dtos.CreateActivity:
    properties:
      description:
        type: string
      duration:
        type: integer
      point_reward:
        type: integer
      repeat_days:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        enum:
        - Activity
        - MiniGame
        - Challenge
        type: string
    required:
    - duration
    - point_reward
    - title
    - type
    type: object
  dtos.CreateActivityRequest:
    properties:
      description:
        type: string
      duration:
        type: integer
      level_id:
        type: string
      point_reward:
        type: integer
      repeat_days:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        enum:
        - Activity
        - MiniGame
        - Challenge
        type: string
    required:
    - duration
    - level_id
    - point_reward
    - title
    - type
    type: object
  dtos.CreateLevel:
    properties:
      activities:
        items:
          $ref: '#/definitions/dtos.CreateActivity'
        type: array
      description:
        type: string
      name:
        type: string
      point_require:
        type: integer
    required:
    - name
    - point_require
    type: object
  dtos.CreateLevelRequest:
    properties:
      description:
        type: string
      name:
        type: string
      point_require:
        type: integer
      program_id:
        type: string
    required:
    - name
    - point_require
    - program_id
    type: object
  dtos.CreateProgramRequest:
    properties:
      desciption:
        type: string
      disease_ids:
        items:
          type: integer
        type: array
      duration:
        type: integer
      goal_ids:
        items:
          type: integer
        type: array
      levels:
        items:
          $ref: '#/definitions/dtos.CreateLevel'
        type: array
      title:
        type: string
    required:
    - duration
    - title
    type: object
  dtos.UpdateActivityRequest:
    properties:
      description:
        type: string
      duration:
        type: integer
      point_reward:
        type: integer
      repeat_days:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        enum:
        - Activity
        - MiniGame
        - Challenge
        type: string
    required:
    - duration
    - point_reward
    - title
    - type
    type: object
  dtos.UpdateProgramRequest:
    properties:
      desciption:
        type: string
      disease_ids:
        items:
          type: integer
        type: array
      duration:
        type: integer
      goal_ids:
        items:
          type: integer
        type: array
      title:
        type: string
    required:
    - duration
    - title
    type: object
  enum.ActivityType:
    enum:
    - Activity
    - MiniGame
    - Challenge
    type: string
    x-enum-varnames:
    - TypeActivity
    - TypeMiniGame
    - TypeChallenge
  models.Account:
    properties:
      account_status:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_verified:
        type: boolean
      password:
        maxLength: 100
        minLength: 8
        type: string
      role:
        type: string
    required:
    - email
    - password
    type: object
  models.AccountCreate:
    properties:
      email:
        type: string
      is_verified:
        type: boolean
      password:
        maxLength: 100
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - user
        type: string
    required:
    - email
    - password
    type: object
  models.Activity:
    properties:
      activity_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      duration:
        type: integer
      level_id:
        type: string
      point_reward:
        type: integer
      title:
        type: string
      type:
        $ref: '#/definitions/enum.ActivityType'
      updated_at:
        type: string
    required:
    - duration
    - point_reward
    - title
    type: object
  models.Expert:
    properties:
      account_id:
        type: string
      avatar_url:
        type: string
      date_of_birth:
        type: string
      expert_id:
        type: string
      expert_type:
        type: string
      full_name:
        type: string
      gender:
        type: boolean
      telephone_number:
        type: string
    required:
    - date_of_birth
    - expert_type
    - full_name
    type: object
  models.Program:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      duration:
        type: integer
      is_active:
        type: boolean
      program_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - duration
    - title
    type: object
host: 127.0.0.1:9000
info:
  contact: {}
  description: List APIs of Healthy Management Service
  termsOfService: http://swagger.io/terms/
  title: Healthy Service API Document
  version: "1.0"
paths:
  /admin/experts:
    get:
      consumes:
      - application/json
      description: Returns a list of experts available in the system
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of experts per page (default is 10)
        in: query
        name: limit
        type: integer
      - description: Filter is deleted (default is false)
        in: query
        name: status
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of expert
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Expert'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: You do not have permission to access this resource
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Retrieve a list of experts
      tags:
      - Expert
    post:
      consumes:
      - multipart/form-data
      description: Create expert profile with file image and json expert data
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Expert image file (max 10MB)
        in: formData
        name: image
        type: file
      - description: Expert data in JSON format
        in: formData
        name: metadata
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Expert created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a new expert
      tags:
      - Expert
  /admin/experts/{id}:
    delete:
      description: Soft delete an expert profile by ID. Optionally deactivate the
        linked user account.
      parameters:
      - description: Expert ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "204":
          description: No Content - Successfully deleted
        "400":
          description: Bad Request - Invalid expert ID
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Unauthorized - Missing or invalid API key
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: Forbidden - User does not have permission
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete an expert profile (soft delete)
      tags:
      - Expert
    put:
      consumes:
      - multipart/form-data
      description: Updates an expert's details based on their ID.
      parameters:
      - description: Expert ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Expert profile picture
        in: formData
        name: image
        type: file
      - description: Expert information in JSON format
        in: formData
        name: metadata
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Expert updated successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error during expert update
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update expert information
      tags:
      - Expert
  /admin/experts/accounts:
    post:
      consumes:
      - application/json
      description: Create a new expert account with email and password
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Account information
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.AccountCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Create expert account successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  $ref: '#/definitions/models.Account'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: You do not have permission to access this resource
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Create a new expert account
      tags:
      - Expert
  /admin/experts/accounts/{id}/lock:
    patch:
      consumes:
      - application/json
      description: Lock expert account by expert ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Expert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Expert account locked successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Expert ID is required
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: You do not have permission to access this resource
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Lock expert account
      tags:
      - Expert
  /admin/experts/accounts/{id}/unlock:
    patch:
      consumes:
      - application/json
      description: Unlock expert account by expert ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Expert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Expert account unlocked successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Expert ID is required
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: You do not have permission to access this resource
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Unlock expert account
      tags:
      - Expert
  /admin/experts/accounts/reset-password:
    post:
      consumes:
      - application/json
      description: Reset expert password with email and new password
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reset password request
        in: body
        name: resetPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/common.RequestAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: You do not have permission to access this resource
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Reset expert password
      tags:
      - Expert
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of users per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Account'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Get list of users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Account information
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.AccountCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Account created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  $ref: '#/definitions/models.Account'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Create a new user account
      tags:
      - User
  /admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Get user details by user ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  $ref: '#/definitions/models.Account'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Get user by ID
      tags:
      - User
  /admin/users/{id}/lock:
    patch:
      consumes:
      - application/json
      description: Lock user account by user ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User account locked successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Lock user account
      tags:
      - User
  /admin/users/{id}/unlock:
    patch:
      consumes:
      - application/json
      description: Unlock user account by user ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User account unlocked successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Unlock user account
      tags:
      - User
  /admin/users/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password with email and new password
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reset password request
        in: body
        name: resetPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/common.RequestAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Reset user password
      tags:
      - User
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to the system with email and password
      parameters:
      - description: Login request information
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/common.RequestAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/common.ResponseLogin'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Login to the system
      tags:
      - Auth
  /auth/password/change:
    post:
      consumes:
      - application/json
      description: Change password for the logged-in user
      parameters:
      - description: Bearer token for authentication
        in: header
        name: Authorization
        required: true
        type: string
      - description: Change password request information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/common.RequestChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                result:
                  type: boolean
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Token must be in Bearer format
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: You do not have permission to access this resource
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - Auth
  /auth/password/forgot:
    post:
      consumes:
      - application/json
      description: Handle forgot password request
      parameters:
      - description: Forgot password request information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/common.RequestForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Forgot password
      tags:
      - Auth
  /auth/password/reset:
    post:
      consumes:
      - application/json
      description: Reset password after verifying OTP
      parameters:
      - description: Reset password request information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/common.RequestAuth'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Reset password
      tags:
      - Auth
  /auth/password/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP for forgot password
      parameters:
      - description: Request OTP information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/common.RequestOTP'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                result:
                  type: boolean
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Verify OTP for forgot password
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new account with email and password
      parameters:
      - description: Account information
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      produces:
      - application/json
      responses:
        "201":
          description: Account created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                email:
                  type: string
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Register a new account
      tags:
      - Auth
  /auth/token/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/common.RequestRefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseAccessToken'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Refresh access token
      tags:
      - Auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Verify OTP for account registration or password reset
      parameters:
      - description: Request OTP information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/common.RequestOTP'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                result:
                  type: boolean
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Verify OTP for account
      tags:
      - Auth
  /expert/activities:
    get:
      consumes:
      - application/json
      description: Get activities for an expert
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Activities retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Activity'
                  type: array
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: No activities found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get activities for an expert
      tags:
      - Activity
    post:
      consumes:
      - application/json
      description: Creates a new activity for a specified level, including repeat
        days. Requires valid JWT token.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Activity details to create
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateActivityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Activity created successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: invalid activity data, invalid level ID, invalid activity type,
            or invalid week day
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: token expired or invalid
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: level not found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: failed to create activity
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a new activity for a level
      tags:
      - Activity
  /expert/activities/{activity_id}:
    delete:
      consumes:
      - application/json
      description: Deletes an activity if it has no participants, or deactivates it
        if it has participants. Requires valid JWT token.
      parameters:
      - description: Activity ID (UUID)
        format: uuid
        in: path
        name: activity_id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Activity deleted or deactivated successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: invalid activity ID
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: token expired or invalid
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: activity not found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: failed to delete or deactivate activity
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete or deactivate an activity by ID
      tags:
      - Activity
    put:
      consumes:
      - application/json
      description: Updates activity details (title, description, duration, point reward,
        type, repeat days) for a specified activity. Requires valid JWT token.
      parameters:
      - description: Activity ID (UUID)
        format: uuid
        in: path
        name: activity_id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Activity details to update
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateActivityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Activity updated successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: invalid activity ID, invalid activity data, invalid activity
            type, or invalid repeat day
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: token expired or invalid
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: activity not found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: failed to update activity
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update an activity by ID
      tags:
      - Activity
  /expert/levels:
    post:
      consumes:
      - application/json
      description: Creates a new level for a specified program owned by the expert.
        Requires valid JWT token.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Level details to create
        in: body
        name: level
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateLevelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Level created successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: invalid level data or invalid program ID
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: token expired or invalid
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: program not found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: failed to create level
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a new level for a program
      tags:
      - Level
  /expert/programs:
    get:
      consumes:
      - application/json
      description: Get programs by expert ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Programs retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Program'
                  type: array
              type: object
        "400":
          description: Invalid expert ID format
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get programs by expert ID
      tags:
      - Program
    post:
      consumes:
      - application/json
      description: Create a new program
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Program request data
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateProgramRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Program created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a new program
      tags:
      - Program
  /expert/programs/{program_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a program if it has no participants, or deactivates it
        (sets is_active = false)
      parameters:
      - description: Program ID (UUID)
        format: uuid
        in: path
        name: program_id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Programs retrieved successfully
          schema:
            $ref: '#/definitions/common.ResponseNormal'
        "400":
          description: invalid program ID or confirmation required
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: token expired or invalid
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: 'unauthorized: not program owner'
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: failed to delete program
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete or deactivate a program by ID
      tags:
      - Program
    put:
      consumes:
      - application/json
      description: Updates program details (title, description, duration, disease
        IDs, goal IDs) for a program owned by the expert. Requires valid JWT token.
      parameters:
      - description: Program ID (UUID)
        format: uuid
        in: path
        name: program_id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Program details to update
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateProgramRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Program updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: invalid program ID or invalid program data
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: token expired or invalid
          schema:
            $ref: '#/definitions/common.ResponseError'
        "403":
          description: 'unauthorized: not program owner'
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: expert not found or program not found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: failed to update program
          schema:
            $ref: '#/definitions/common.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a program by ID
      tags:
      - Program
  /profile:
    post:
      consumes:
      - multipart/form-data
      description: Create user profile with file image and json profile
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Profile image file (max 10MB)
        in: formData
        name: image
        type: file
      - description: Json body for profile
        in: formData
        name: metadata
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Profile created successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: invalid request form-data
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: invalid token
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Create a new profile
      tags:
      - Profile
  /profile/{id}:
    put:
      consumes:
      - multipart/form-data
      description: Update user profile with file image and json profile
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile image file (max 10MB)
        in: formData
        name: image
        type: file
      - description: Json body for profile
        in: formData
        name: metadata
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseNormal'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: invalid request form-data
          schema:
            $ref: '#/definitions/common.ResponseError'
        "401":
          description: invalid token
          schema:
            $ref: '#/definitions/common.ResponseError'
        "404":
          description: Profile not found
          schema:
            $ref: '#/definitions/common.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ResponseError'
      summary: Update user profile
      tags:
      - Profile
schemes:
- http
- https
swagger: "2.0"
